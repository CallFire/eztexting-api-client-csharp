import org.gradle.internal.os.OperatingSystem
import groovy.xml.XmlUtil

plugins {
  id 'com.ullink.msbuild' version '2.14'
  id 'com.ullink.nuget' version '2.12'
  id 'com.ullink.nunit' version '1.4'
  id 'com.ullink.opencover' version '1.2'
  id 'net.researchgate.release' version '2.3.4'
}

archivesBaseName = 'EzTextingApiClient'
ext['buildConfiguration'] = System.properties[ 'BUILD_CONFIG' ] ?: "Release"
ext['assemblyBinDir'] = "src/EzTextingApiClient/bin/$buildConfiguration"
ext['buildDistDir'] = "$buildDir/dist"
ext['assemblyInfo'] = "src/EzTextingApiClient/Properties/AssemblyInfo.cs"

defaultTasks('nugetPack')

nuget {
    version = '4.4.0'
}

msbuild.dependsOn nugetRestore
msbuild {
    solutionFile = 'eztexting-api-client-csharp.sln'
    configuration = buildConfiguration
    projectName = 'EzTextingApiClient'
    generateDoc = true
    inputs.file(project.buildFile)
}

nunit {
    testAssemblies = [ msbuild.projects['EzTextingApiClient.Tests'].properties.TargetPath ]
}
nunit.dependsOn msbuild

task updateNuspecFile << {
    def specFile = file('EzTextingApiClient.nuspec')
    def spec = new XmlSlurper().parse(specFile)

    project.version = patchVersion(spec.metadata.version.text)
    spec.metadata.version = project.version
    spec.metadata.releaseNotes = file('Changelog.txt').text
    // cleanup previous lib/ and src/ files since they depend on build configuration
    spec.files.file.findAll { it.@target == 'lib' || it.@target == 'src' }.each { it.replaceNode {} }
    spec.files.appendNode {
        file(src: "$assemblyBinDir/${archivesBaseName}.dll", target: 'lib') {}
        file(src: "$assemblyBinDir/${archivesBaseName}.dll.config", target: 'lib') {}
        file(src: "$assemblyBinDir/${archivesBaseName}.xml", target: 'lib') {}
        if(buildConfiguration == 'Debug') {
            file(src: "src/**/*.cs", target: 'src') {}
        }
    }

    def fw = new FileWriter('EzTextingApiClient.nuspec')
    XmlUtil.serialize(spec, fw)
    // have to close manually because on windows file remains locked
    fw.close()
}

def patchVersion(version) {
    def regex = ~/\[assembly: AssemblyVersion\("(.*)\.\*"\)\]/
    def matcher = regex.matcher(new File(assemblyInfo).text)
    while(matcher.find()) {
        def updated = matcher.group(1)
        println "Patching Nuspec version to $updated"
        return updated
    }
    version
}

task zipBinaries(type: Zip) {
    destinationDir = file(buildDistDir)
    from 'LICENSE.txt'
    from 'Changelog.txt'
    from (assemblyBinDir) {
        include "${archivesBaseName}.*"
    }
}
zipBinaries.dependsOn nunit

// nuget package for upload to nuget
nugetSpec {
    nuspecFile = file('EzTextingApiClient.nuspec')
}
nugetSpec.dependsOn updateNuspecFile

nugetPack {
    destinationDir = buildDistDir
    generateSymbols = buildConfiguration == 'Debug'
}
nugetPack.dependsOn zipBinaries

// nuget package upload, requires API key to be set
nugetPush {
    serverUrl = 'https://www.nuget.org/api/v2/package'
    apiKey = System.properties[ 'NUGET_API_KEY' ] ?: "key not set"
    nupkgFile = nugetPack.packageFile
}